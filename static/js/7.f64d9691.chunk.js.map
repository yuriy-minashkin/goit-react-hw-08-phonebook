{"version":3,"file":"static/js/7.f64d9691.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/myContacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const getContacts = state => state.contacts.items;\nexport const getError = state => state.contacts.error;\nexport const isLoading = state => state.contacts.isLoading;\nexport const getFilter = state => state.filter;\n\nexport const FilteredContacts = state => {\n  const filter = getFilter(state);\n  const contacts = getContacts(state);\n  return contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filter);\n  });\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/myContacts/selectors';\nimport { addContact } from 'redux/myContacts/operations';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const phoneNumberInputID = nanoid();\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n   \n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      \n      case 'number':\n        setNumber(value);\n        break;\n      \n      default:\n        return;\n    }\n  };\n \n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    contacts.some(contact => contact.name.toLowerCase() === newContact.name.toLowerCase())\n      ? alert(`${newContact.name} is already in contacts.`)\n      : dispatch(addContact(newContact));\n    \n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label className={css.label} htmlFor={nameInputId}>\n          Name\n          <input\n            className={css.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n            onChange={handleChange}\n          />\n        </label>\n\n        <label className={css.label} htmlFor={phoneNumberInputID}>\n          Number\n          <input\n            className={css.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            id={phoneNumberInputID}\n            onChange={handleChange}\n          />\n        </label>\n\n        <button className={css.button} type=\"submit\">Add contact</button>\n      </form>\n    );\n};\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { filterSlice } from 'redux/myContacts/filterSlice';\nimport { getFilter } from 'redux/myContacts/selectors';\nimport { nanoid } from 'nanoid'\nimport css from './Filter.module.css'\n\nconst Filter = () => {\n  const filterInputID = nanoid();\n  const { changeFilter } = filterSlice.actions;\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const filterInputHandler = event => {\n    const { value } = event.target;\n    dispatch(changeFilter(value.toLowerCase()))\n  };\n\n\n  return (\n  <label className={css.label} htmlFor={filterInputID}>\n    Find contacts by name\n    <input\n      className={css.input}\n      type=\"text\"\n      name=\"filter\"\n      value={filter}\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      id={filterInputID}\n      onChange={filterInputHandler}\n    />\n  </label>\n);\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"button\":\"ContactList_button__7kL4l\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FilteredContacts } from 'redux/myContacts/selectors';\nimport { deleteContact, fetchContacts  } from 'redux/myContacts/operations';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts ());\n  }, [dispatch]);\n\n  const contactDelHandler = id => {\n    dispatch(deleteContact(id));\n  };\n\n  const renderContacts = useSelector(FilteredContacts);\n\n  return (\n    <ul className={css.list}>\n      {renderContacts.map(({ id, name, number }) => (\n        <li className={css.item} key={id}>\n          <p>\n            <span>{name}:</span> {number}\n          </p>\n          <button className={css.button} onClick={() => contactDelHandler(id)}>Delete</button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;","import ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useSelector } from 'react-redux';\nimport { isLoading } from 'redux/myContacts/selectors';\n\nconst Contacts = () => {\n  const loader = useSelector(isLoading);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      {loader && <p>Loading contacts...</p>}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","getContacts","state","contacts","items","isLoading","getFilter","filter","FilteredContacts","contact","name","toLowerCase","includes","useState","setName","number","setNumber","nameInputId","phoneNumberInputID","useSelector","dispatch","useDispatch","handleChange","event","target","value","reset","className","css","onSubmit","preventDefault","newContact","some","alert","addContact","htmlFor","type","pattern","title","required","onChange","filterInputID","changeFilter","filterSlice","useEffect","fetchContacts","renderContacts","map","onClick","deleteContact","contactDelHandler","loader"],"sourceRoot":""}